#!/bin/bash

# To use, add 'alias ghd=". ghd"' to your ~/.bashrc, and put ghd in your PATH.
#
# Switches to the given github url/repo.
# Clones to GHD_LOCATION, or /tmp/ghd if not set.
# Clones via https by default (set GHD_USE_SSH=1 for ssh).

function _ghd_run() {
  location_root="${GHD_LOCATION:-/tmp/ghd}"
  use_ssh="${GHD_USE_SSH:-0}"
  pager="${PAGER:-cat}"
  repo_url_or_name="$1"
  should_pull=0
  if [[ $repo_url_or_name == *"!" ]]; then
    repo_url_or_name="${repo_url_or_name::-1}"
    should_pull=1
  fi
  GITHUB_PREFIX='^\(\(https:\/\/\)\|\(git@\)\)github\.com[:/]'
  GITHUB_SUFFIX='\.git$'

  function maybe_pull() { # directory
    directory="$1"
    if [[ $should_pull -eq 0 ]]; then
      return 1
    fi
    if [[ -d "$directory/.git" ]]; then
      git -C "$directory" pull --all
      return 0
    fi
    return 1
  }

  function get_user() {
    email="$(git config --get user.email 2>/dev/null)"
    if [[ ! -z "$email" ]]; then
      echo "$email"
    fi;
    if [[ ! -z "$GITHUB_USER" ]]; then
      echo "${GITHUB_USER}"
    fi;
    echo "$USER"
    return 0
  }

  function get_token() {
    token="$GITHUB_TOKEN"
    if [[ -z "$GITHUB_TOKEN" ]]; then
      >&2 echo "GITHUB_TOKEN is empty!"
      >&2 echo "To access private Github repositories:"
      >&2 echo "1. Go to https://github.com/settings/tokens."
      >&2 echo "2. Create a Personal Access Token."
      >&2 echo "3. Store the value of that token as the GITHUB_TOKEN environment variable."
      return 1
    fi
    echo "$GITHUB_TOKEN"
  }

  function get_repo_name() { # repo_url_or_name
    repo_url_or_name="$1"
    name="$(echo "$repo_url_or_name" | \
      sed -e "s/$GITHUB_PREFIX//g" | \
      sed -e "s/$GITHUB_SUFFIX//g")"
    echo "$name"
  }

  function get_repo_url() { # repo_url_or_name
    repo_url_or_name="$1"
    if [[ $repo_url_or_name =~ ^$GITHUB_PREFIX ]]; then
      echo "$repo_url_or_name"
    elif [[ $use_ssh -eq 1 ]]; then
      echo "git@github.com:$repo_url_or_name"
    else
      echo "https://github.com/$repo_url_or_name"
    fi
  }

  function fzf_ghd() { # query
    query="$1"
    if declare -F __fzfcmd >/dev/null; then
      dest="$(find $location_root -maxdepth 2 -printf "%P\n" | \
        $(__fzfcmd) --query="$query" --preview="
          printf 'https://www.github.com/{}\n\n' &&
          $pager '$location_root/{}/README.md'" \
      )"
      fzf_status="$?"
      if [[ "$fzf_status" -ne 0 ]]; then
        return "$fzf_status";
      fi
      maybe_pull "$location_root/$dest"
      cd "$location_root/$dest"
      return 0
    else
      return 1
    fi
  }

  function handle_single_name() { # name
    single_name="$1"
    matches="$(find $location_root -maxdepth 2 -name "$single_name")"
    if [[ -z $matches ]]; then
      if fzf_ghd "$single_name"; then
        return 0
      fi
      echo "No cloned repository, user, or organization found for: $single_name"
      return 1
    fi

    num_matches="$(echo "$matches" | wc -l)"
    if [ "$num_matches" -eq 1 ]; then
      maybe_pull "$matches"
      cd "$matches"
      return 0
    fi

    if fzf_ghd "$single_name"; then
      return 0
    fi

    echo "Found multiple matches for $single_name:"
    echo "$matches"
    return 1
  }

  mkdir -p "$location_root"

  if [[ -z "$repo_url_or_name" ]]; then
    fzf_ghd
    return $?
  fi

  if [[ "$repo_url_or_name" == "/" ]]; then
    maybe_pull "$location_root"
    cd "$location_root"
    return 0
  fi

  repo_name="$(get_repo_name "$repo_url_or_name")"
  repo_url="$(get_repo_url "$repo_url_or_name")"
  if [[ "$repo_name" != *"/"* ]]; then
    handle_single_name $repo_name
    return $?
  elif [[ ! -d "$location_root/$repo_name" ]]; then
    git clone -- "$repo_url" "$location_root/$repo_name"
    if [[ $? != 0 ]]; then
      return 1 # If git clone fails, exit.
    fi
  fi
  maybe_pull "$location_root/$repo_name"
  cd "$location_root/$repo_name"
  return 0
}

_ghd_run $@
