#!/bin/bash

# To use, add 'alias ghd=". ghd"' to your ~/.bashrc, and put ghd in your PATH.
#
# Switches to the given github url/repo.
# Clones to GHD_LOCATION, or /tmp/ghd if not set.
# Clones via https by default (set GHD_USE_SSH=1 for ssh).

function _ghd_run() {
  location_root="${GHD_LOCATION:-/tmp/ghd}"
  use_ssh="${GHD_USE_SSH:-0}"
  pager="${PAGER:-cat}"
  repo_url_or_name="$1"

  is_clone_all_requested=0
  is_pull_requested=0
  while [[ $repo_url_or_name == *'*' ]] || [[ $repo_url_or_name == *'!' ]]
  do
    if [[ $repo_url_or_name == *'*' ]]; then
      repo_url_or_name="${repo_url_or_name::-1}"
      is_clone_all_requested=1
    fi

    if [[ $repo_url_or_name == *'!' ]]; then
      repo_url_or_name="${repo_url_or_name::-1}"
      is_pull_requested=1
    fi
  done

  GITHUB_PREFIX='^\(\(https:\/\/\)\|\(git@\)\)github\.com[:/]'
  GITHUB_SUFFIX='\.git$'

  function maybe_pull() { # location_root repo_url target branch
    location_root="$1"
    repo_url="$2"
    target="$3"
    branch="$4"
    directory="$location_root/$target"

    if [[ $is_pull_requested -eq 0 ]] && [[ -d "$directory" ]]; then
      if [[ -n "$branch" ]]; then
        git -C "$directory" checkout "$branch"
        return $?
      fi
      return 0
    fi

    if [[ -z "$location_root" ]]; then
      return 1
    fi

    if [[ "$target" == '/' ]] || [[ "$target" != *"/"* ]]; then
      return 0
    fi

    if [[ ! -d "$directory" ]]; then
      git clone --branch "$branch" -- "$repo_url" "$directory"
      return $?
    fi

    if [[ -d "$directory/.git" ]]; then
      git -C "$directory" pull --all

      if [[ -n "$branch" ]]; then
        git -C "$directory" checkout "$branch"
      fi
      return $?
    fi

    return 0
  }

  function maybe_clone_all() { # location_root repo_owner branch
    location_root="$1"
    repo_owner="$2"
    branch="$3"

    if [[ $is_clone_all_requested -eq 0 ]]; then
      return 0
    fi

    if ! gh auth status > /dev/null 2>&1; then
      return 1
    fi

    repo_single_names="$(gh repo list "$repo_owner" --limit 10000 \
      | cut -f1 | cut -d/ -f2)"

    if [[ -n "$branch" ]]; then
      branch_param="--branch \"$branch\""
    else
      branch_param=""
    fi

    for repo_single_name in ${repo_single_names}; do
      directory="$location_root/$repo_owner/$repo_single_name"
      if [[ -d "$directory" ]]; then
        echo "Not cloning $repo_owner/$repo_single_name: directory exists"
        continue
      fi

      git clone $branch_param -- "$repo_url/$repo_single_name" "$directory"
    done

    return $result
  }

  function get_repo_name() { # repo_url_or_name
    repo_url_or_name="$1"
    name="$(echo "$repo_url_or_name" | \
      sed -e "s/$GITHUB_PREFIX//g" | \
      sed -e "s/$GITHUB_SUFFIX//g")"
    echo "$name"
  }

  function get_repo_url() { # repo_url_or_name
    repo_url_or_name="$1"
    if [[ $repo_url_or_name =~ ^$GITHUB_PREFIX ]]; then
      echo "$repo_url_or_name"
    elif [[ $use_ssh -eq 1 ]]; then
      echo "git@github.com:$repo_url_or_name"
    else
      echo "https://github.com/$repo_url_or_name"
    fi
  }

  function search_local() { # name
    name="$1"

    find $location_root -maxdepth 2 -name "*$name*" -printf "%P\n"
  }

  function search_gh() { # name
    name="$1"

    if ! command -v gh > /dev/null 2>&1; then
      return 1
    fi

    if ! gh auth status > /dev/null 2>&1; then
      return 2
    fi

    repos="$(gh repo list --limit 10000 | cut -f1)"

    if [[ -z "$name" ]]; then
      echo "$repos"
    fi

    echo "$repos" | grep "$name"
  }

  function get_repo_list() { # name
    name="$1"
    {
      search_local "$name"
      search_gh "$name"
    } | \
      awk 'NF' | \
      sort -u
  }

  function fzf_ghd() { # query matches -> choice
    query="$1"
    matches="$2"

    if [[ -z "$matches" ]]; then
      return 1
    fi

    if ! declare -F __fzfcmd >/dev/null; then
      return 2
    fi

    dest="$(echo "$matches" | \
      $(__fzfcmd) --query="$query" --preview="
        printf 'https://www.github.com/{}\n\n' &&
        $pager '$location_root/{}/README.md'" \
    )"
    fzf_status="$?"
    if [[ "$fzf_status" -ne 0 ]]; then
      return "$fzf_status";
    fi
    echo "$dest"
    return 0
  }

  function handle_single_name() { # name
    single_name="$1"
    matches="$(get_repo_list "$single_name")"
    if [[ -z $matches ]]; then
      if fzf_ghd "$single_name" "$matches"; then
        return 0
      fi
      echo "No cloned repository, user, or organization found for: $single_name" >&2
      return 1
    fi

    num_matches="$(echo "$matches" | wc -l)"
    if [ "$num_matches" -eq 1 ]; then
      echo "$matches"
      return 0
    fi

    if fzf_ghd "$single_name" "$matches"; then
      return 0
    fi

    echo "Found multiple matches for $single_name:" >&2
    echo "$matches" >&2
    return 1
  }

  function find_target() { # repo_name
    repo_name="$1"

    if [[ -z "$repo_name" ]]; then
      fzf_ghd '' "$(get_repo_list)"
      return $?
    fi

    if [[ "$repo_name" == "/" ]]; then
      return 0
    fi

    if [[ "$repo_name" == *"/"* ]]; then
      echo "$repo_name"
      return 0
    fi

    handle_single_name $repo_name
    return $?
  }

  mkdir -p "$location_root"

  repo_name="$(get_repo_name "$repo_url_or_name")"
  branch=""
  if [[ "$repo_name" == *"@"* ]]; then
    branch=$(echo $repo_name | cut -f2 -d@)
    repo_name=$(echo $repo_name | cut -f1 -d@)
  fi

  if [[ -n "$branch" ]] && [[ -z "$repo_name" ]]; then
    git checkout "$branch"
    return $?
  fi

  if [[ $is_clone_all_requested -eq 0 ]]; then
    target="$(find_target "$repo_name")"
  else
    target="$repo_name"
  fi

  result=$?
  if [[ $result -ne 0 ]]; then
    return $result
  fi
  repo_url="$(get_repo_url "$target")"

  maybe_clone_all "$location_root" "$target" "$branch"
  result=$?
  if [[ $result -ne 0 ]]; then
    return $result
  fi

  maybe_pull "$location_root" "$repo_url" "$target" "$branch"
  result=$?
  if [[ $result -ne 0 ]]; then
    return $result
  fi
  cd "$location_root/$target"
  return 0
}

_ghd_run $@
